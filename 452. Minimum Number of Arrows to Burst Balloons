452. Minimum Number of Arrows to Burst Balloons

class Solution {
  public static void merge(
  int[][] a, int[][] l, int[][] r, int left, int right) {
 
    int i = 0, j = 0, k = 0;
    while (i < left && j < right) {
        if (l[i][0] <= r[j][0]) {
            a[k][0] = l[i][0];
            a[k][1]=l[i][1];
            k++;i++;
        }
        else {
            a[k][0] = r[j][0];
            a[k][1]=r[j][1];
            k++;
            j++;
        }
    }
    while (i < left) {
     a[k][0] = l[i][0];
     a[k][1]=l[i][1];
            k++;i++;
    }
    while (j < right) {
        a[k][0] = r[j][0];
            a[k][1]=r[j][1];
            k++;
            j++;
    }
}
    public static void mergeSort(int[][]a, int n) {
    if (n < 2) {
        return;
    }
    int mid = n / 2;
    int[][] l = new int[mid][2];
    int[][] r = new int[n - mid][2];
    for (int i = 0; i < mid; i++) {
        l[i][0] = a[i][0];
        l[i][1]=a[i][1];
    }
    for (int i = mid; i < n; i++) {
        r[i - mid][0] = a[i][0];
        r[i-mid][1]=a[i][1];
    }
    mergeSort(l, mid);
    mergeSort(r, n - mid);
    merge(a, l, r, mid, n - mid);
}
    public int findMinArrowShots(int[][] points) 
    {
        int i=1;
        int min=0,freq=0;
        mergeSort(points,points.length);
       freq=points[0][1];
        while(i<points.length)
        {
            if(freq>=points[i][0])
            {
                freq=(freq<points[i][1]?freq:points[i][1]);
            }
            else
            {
                min+=1;
                freq=points[i][1];
            }
            i++;
        }
        return min+1;
}
}
