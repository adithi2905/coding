#You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 


 public void add(int c, int sum,ListNode l1,ListNode l2,ListNode pl3,ListNode l3)
    {
          if(l1==null && l2==null)
        {
            if(c==1)
             l3.val=1;
             else
             pl3.next=null;
             return;
       
        }
         l3.next=new ListNode();
       
         if((l1==null)&&(l2!=null))
        {
            sum=(l2.val+c)%10;
            c=(l2.val+c)/10;
            add(c,sum,null,l2.next,l3,l3.next);
        }
        else if((l1!=null)&&(l2==null))
        {
            sum=(l1.val+c)%10;
            c=(l1.val+c)/10;
           add(c,sum,l1.next,null,l3,l3.next);
        } 
        else
        {
        sum=(l1.val+l2.val+c)%10;
        c=(l1.val+l2.val+c)/10;
        add(c,sum,l1.next,l2.next,l3,l3.next);
        }
        l3.val=sum;
        
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode l3=new ListNode();
        add(0,0,l1,l2,l3,l3);
        
        return l3;
        
    }
}


